{
  "api/index.html": {
    "href": "api/index.html",
    "title": "SimAirport API | SimAirport Docs",
    "keywords": "SimAirport API API Documentations for SimAirport. SimAirport.Modding.Base Root class for defining a script mod. SimAirport.Modding.Data Helpers for accesing SimAirport data. SimAirport.Modding.Settings Setting helper for script mods."
  },
  "api/SimAirport.Modding.Base.BaseMod.html": {
    "href": "api/SimAirport.Modding.Base.BaseMod.html",
    "title": "Class BaseMod | SimAirport Docs",
    "keywords": "Class BaseMod Inheritance System.Object BaseMod Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Base Assembly : SimAirport.Modding.Base.dll Syntax public abstract class BaseMod Properties | Improve this Doc View Source Author You. Declaration public abstract string Author { get; } Property Value Type Description System.String | Improve this Doc View Source Description Description of your mod. Declaration public abstract string Description { get; } Property Value Type Description System.String | Improve this Doc View Source InternalName This is the name the game uses to identify your mod, use something unique to you like sa.yourname.yourmod to not conflict with other mods. Declaration public abstract string InternalName { get; } Property Value Type Description System.String | Improve this Doc View Source Name Name of your mod. Declaration public abstract string Name { get; } Property Value Type Description System.String | Improve this Doc View Source SettingManager Setting manager, created by the game after loading the mod. Will be set and filled with settings before running OnSettingsLoaded! Declaration public abstract SettingManager SettingManager { get; set; } Property Value Type Description SettingManager Methods | Improve this Doc View Source OnAirportLoaded(Dictionary<String, Object>) Called after the airport loaded, contains any saved data you passed for this airport. Declaration public virtual void OnAirportLoaded(Dictionary<string, object> saveData) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Object > saveData | Improve this Doc View Source OnAirportSaving() Called before the airport is saved, return whatever you want to be saved for this airport! Declaration public virtual Dictionary<string, object> OnAirportSaving() Returns Type Description System.Collections.Generic.Dictionary < System.String , System.Object > | Improve this Doc View Source OnDisabled() Called when the mod is disabled in the mod settings. Declaration public virtual void OnDisabled() | Improve this Doc View Source OnLoad(GameState) Called when the mod is loaded. This may be called from the menu or in-game but will only be called once. Declaration public virtual void OnLoad(GameState state) Parameters Type Name Description GameState state The current game state | Improve this Doc View Source OnSettingsLoaded() Executed after settings are loaded, you can add settings or change them at this point. Declaration public virtual void OnSettingsLoaded() | Improve this Doc View Source OnTick() Called once per frame, use to update data that must be updated each fram. Only called in-game, never from menu. Use wisely as heavy load slows down the game! Declaration public abstract void OnTick()"
  },
  "api/SimAirport.Modding.Base.html": {
    "href": "api/SimAirport.Modding.Base.html",
    "title": "Namespace SimAirport.Modding.Base | SimAirport Docs",
    "keywords": "Namespace SimAirport.Modding.Base Classes BaseMod"
  },
  "api/SimAirport.Modding.Data.EventSystem.html": {
    "href": "api/SimAirport.Modding.Data.EventSystem.html",
    "title": "Class EventSystem | SimAirport Docs",
    "keywords": "Class EventSystem Used for Events Inheritance System.Object EventSystem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Data Assembly : SimAirport.Modding.Base.dll Syntax public class EventSystem Constructors | Improve this Doc View Source EventSystem() Declaration public EventSystem() Properties | Improve this Doc View Source Instance The current EventSystem instance. Access this to use it's vars/functions Declaration public static EventSystem Instance { get; } Property Value Type Description EventSystem | Improve this Doc View Source OnLevelChanged UI level change, provides new level. Declaration public Action<int> OnLevelChanged { get; set; } Property Value Type Description System.Action < System.Int32 > | Improve this Doc View Source OnStateChanged State change, provides the new state. Declaration public Action<GameState> OnStateChanged { get; set; } Property Value Type Description System.Action < GameState >"
  },
  "api/SimAirport.Modding.Data.Game.html": {
    "href": "api/SimAirport.Modding.Data.Game.html",
    "title": "Class Game | SimAirport Docs",
    "keywords": "Class Game Inheritance System.Object Game Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Data Assembly : SimAirport.Modding.Base.dll Syntax public class Game Constructors | Improve this Doc View Source Game(Func<GameState>, Func<Double>, Action<Double>) Declaration public Game(Func<GameState> internalGetState, Func<double> internalGetMoneyBalance, Action<double> internalSetMoneyBalance) Parameters Type Name Description System.Func < GameState > internalGetState System.Func < System.Double > internalGetMoneyBalance System.Action < System.Double > internalSetMoneyBalance Properties | Improve this Doc View Source Instance The current Game instance. Access this to use it's vars/functions Declaration public static Game Instance { get; } Property Value Type Description Game | Improve this Doc View Source MoneyBalance Access to the game's money balance. Declaration public double MoneyBalance { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source GetState() Returns the current GameState . Declaration public GameState GetState() Returns Type Description GameState"
  },
  "api/SimAirport.Modding.Data.GameState.html": {
    "href": "api/SimAirport.Modding.Data.GameState.html",
    "title": "Enum GameState | SimAirport Docs",
    "keywords": "Enum GameState Namespace : SimAirport.Modding.Data Assembly : SimAirport.Modding.Base.dll Syntax public enum GameState Fields Name Description Career LoadScreen MainMenu Sandbox Scenario Undefined"
  },
  "api/SimAirport.Modding.Data.GameTime.html": {
    "href": "api/SimAirport.Modding.Data.GameTime.html",
    "title": "Class GameTime | SimAirport Docs",
    "keywords": "Class GameTime Gives access to GameTime Inheritance System.Object GameTime Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Data Assembly : SimAirport.Modding.Base.dll Syntax public class GameTime Constructors | Improve this Doc View Source GameTime(Func<Double>, Func<TimeSpan>) Declaration public GameTime(Func<double> internalTotalGameSeconds, Func<TimeSpan> internalCurrentGameTime) Parameters Type Name Description System.Func < System.Double > internalTotalGameSeconds System.Func < System.TimeSpan > internalCurrentGameTime Properties | Improve this Doc View Source CurrentGameTime Returns the current in-game time and date. Declaration public TimeSpan CurrentGameTime { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Instance The current GameTime instance. Access this to use it's vars/functions Declaration public static GameTime Instance { get; } Property Value Type Description GameTime | Improve this Doc View Source TotalGameSeconds Returns the total time this game has been running in in game seconds Declaration public double TotalGameSeconds { get; } Property Value Type Description System.Double"
  },
  "api/SimAirport.Modding.Data.Graphics.html": {
    "href": "api/SimAirport.Modding.Data.Graphics.html",
    "title": "Class Graphics | SimAirport Docs",
    "keywords": "Class Graphics Access to in-game graphics Inheritance System.Object Graphics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Data Assembly : SimAirport.Modding.Base.dll Syntax public class Graphics Constructors | Improve this Doc View Source Graphics(Func<String, Sprite>) Declaration public Graphics(Func<string, Sprite> internalGetSprite) Parameters Type Name Description System.Func < System.String , Sprite > internalGetSprite Properties | Improve this Doc View Source Instance The current Graphics instance. Access this to use it's vars/functions Declaration public static Graphics Instance { get; } Property Value Type Description Graphics Methods | Improve this Doc View Source GetSprite(String) Get a sprite from the game or modded ones. Declaration public Sprite GetSprite(string name) Parameters Type Name Description System.String name Name of the sprite to get Returns Type Description Sprite"
  },
  "api/SimAirport.Modding.Data.html": {
    "href": "api/SimAirport.Modding.Data.html",
    "title": "Namespace SimAirport.Modding.Data | SimAirport Docs",
    "keywords": "Namespace SimAirport.Modding.Data Classes EventSystem Used for Events Game GameTime Gives access to GameTime Graphics Access to in-game graphics Internationalization Access to the game-managed i18n translation library. Map Access to the game's map controller It is recommended that you only access this during Career , Sandbox , or Scenario Enums GameState"
  },
  "api/SimAirport.Modding.Data.Internationalization.html": {
    "href": "api/SimAirport.Modding.Data.Internationalization.html",
    "title": "Class Internationalization | SimAirport Docs",
    "keywords": "Class Internationalization Access to the game-managed i18n translation library. Inheritance System.Object Internationalization Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Data Assembly : SimAirport.Modding.Base.dll Syntax public class Internationalization Constructors | Improve this Doc View Source Internationalization(Func<String, String, String>) Declaration public Internationalization(Func<string, string, string> internalGet) Parameters Type Name Description System.Func < System.String , System.String , System.String > internalGet Properties | Improve this Doc View Source Instance The current Internationalization instance. Access this to use it's vars/functions Declaration public static Internationalization Instance { get; } Property Value Type Description Internationalization Methods | Improve this Doc View Source Get(String, String) Get a string from the current locale (includes everything from the game and any modded i18n) Declaration public string Get(string key, string defaultValue = \"\") Parameters Type Name Description System.String key Translation key System.String defaultValue Default value, optional. Returns Type Description System.String"
  },
  "api/SimAirport.Modding.Data.Map.html": {
    "href": "api/SimAirport.Modding.Data.Map.html",
    "title": "Class Map | SimAirport Docs",
    "keywords": "Class Map Access to the game's map controller It is recommended that you only access this during Career , Sandbox , or Scenario Inheritance System.Object Map Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Data Assembly : SimAirport.Modding.Base.dll Syntax public class Map Constructors | Improve this Doc View Source Map(Action<Int32>) Declaration public Map(Action<int> internalSetMaxMapCellCount) Parameters Type Name Description System.Action < System.Int32 > internalSetMaxMapCellCount Properties | Improve this Doc View Source Instance The current Map instance. Access this to use it's vars/functions Declaration public static Map Instance { get; } Property Value Type Description Map Methods | Improve this Doc View Source SetMaxMapCellCount(Int32) Sets the amount of cells at which buying new land will be forbidden. Declaration public void SetMaxMapCellCount(int cellCount) Parameters Type Name Description System.Int32 cellCount Maximum cell count"
  },
  "api/SimAirport.Modding.Settings.CheckboxSetting.html": {
    "href": "api/SimAirport.Modding.Settings.CheckboxSetting.html",
    "title": "Class CheckboxSetting | SimAirport Docs",
    "keywords": "Class CheckboxSetting Inheritance System.Object SettingBase SettingBase < System.Boolean > CheckboxSetting Inherited Members SettingBase<Boolean>.Type SettingBase<Boolean>.SetValue(Object) SettingBase<Boolean>.GetValue() SettingBase.SortOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Settings Assembly : SimAirport.Modding.Base.dll Syntax public class CheckboxSetting : SettingBase<bool> Properties | Improve this Doc View Source Name Name of the variable. Declaration public override string Name { get; set; } Property Value Type Description System.String Overrides SimAirport.Modding.Settings.SettingBase<System.Boolean>.Name | Improve this Doc View Source OnValueChanged ValueChanged event, fires when value is changed. Example callback: OnValueChanged = delegate (val T) { this.MyMagicalFunction(val); } Declaration public override Action<bool> OnValueChanged { get; set; } Property Value Type Description System.Action < System.Boolean > Overrides SimAirport.Modding.Settings.SettingBase<System.Boolean>.OnValueChanged | Improve this Doc View Source Value Current value, will be set on game load and when user changes variable. Declaration public override bool Value { get; set; } Property Value Type Description System.Boolean Overrides SimAirport.Modding.Settings.SettingBase<System.Boolean>.Value"
  },
  "api/SimAirport.Modding.Settings.DropdownSetting.html": {
    "href": "api/SimAirport.Modding.Settings.DropdownSetting.html",
    "title": "Class DropdownSetting | SimAirport Docs",
    "keywords": "Class DropdownSetting Inheritance System.Object SettingBase SettingBase < System.Int32 > DropdownSetting Inherited Members SettingBase<Int32>.Type SettingBase<Int32>.SetValue(Object) SettingBase<Int32>.GetValue() SettingBase.SortOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Settings Assembly : SimAirport.Modding.Base.dll Syntax public class DropdownSetting : SettingBase<int> Properties | Improve this Doc View Source Name Name of the variable. Declaration public override string Name { get; set; } Property Value Type Description System.String Overrides SimAirport.Modding.Settings.SettingBase<System.Int32>.Name | Improve this Doc View Source OnValueChanged ValueChanged event, fires when value is changed. Example callback: OnValueChanged = delegate (val T) { this.MyMagicalFunction(val); } Declaration public override Action<int> OnValueChanged { get; set; } Property Value Type Description System.Action < System.Int32 > Overrides SimAirport.Modding.Settings.SettingBase<System.Int32>.OnValueChanged | Improve this Doc View Source Options I18n keys for your selectable options. Declaration public List<string> Options { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source Value Index of the selected option in the Dropdown. Declaration public override int Value { get; set; } Property Value Type Description System.Int32 Overrides SimAirport.Modding.Settings.SettingBase<System.Int32>.Value"
  },
  "api/SimAirport.Modding.Settings.html": {
    "href": "api/SimAirport.Modding.Settings.html",
    "title": "Namespace SimAirport.Modding.Settings | SimAirport Docs",
    "keywords": "Namespace SimAirport.Modding.Settings Classes CheckboxSetting DropdownSetting LabelSetting SettingBase SettingBase<T> Base setting type. SettingManager SliderSetting Setting for a float value, will be displayed as slider. StringSetting Setting for a string, will be displayed as a textbox."
  },
  "api/SimAirport.Modding.Settings.LabelSetting.html": {
    "href": "api/SimAirport.Modding.Settings.LabelSetting.html",
    "title": "Class LabelSetting | SimAirport Docs",
    "keywords": "Class LabelSetting Inheritance System.Object SettingBase SettingBase < System.String > LabelSetting Inherited Members SettingBase<String>.Type SettingBase<String>.SetValue(Object) SettingBase<String>.GetValue() SettingBase.SortOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Settings Assembly : SimAirport.Modding.Base.dll Syntax public class LabelSetting : SettingBase<string> Properties | Improve this Doc View Source Name Name of the variable. Declaration public override string Name { get; set; } Property Value Type Description System.String Overrides SimAirport.Modding.Settings.SettingBase<System.String>.Name | Improve this Doc View Source OnValueChanged DO NOT USE! Label settings value never changes! Declaration [Obsolete(\"Label settings value never changes!\")] public override Action<string> OnValueChanged { get; set; } Property Value Type Description System.Action < System.String > Overrides SimAirport.Modding.Settings.SettingBase<System.String>.OnValueChanged | Improve this Doc View Source Value DO NOT USE! Label setting does not have a value, only a Name! Declaration [Obsolete(\"Label setting does not have a value, only a Name!\")] public override string Value { get; set; } Property Value Type Description System.String Overrides SimAirport.Modding.Settings.SettingBase<System.String>.Value"
  },
  "api/SimAirport.Modding.Settings.SettingBase.html": {
    "href": "api/SimAirport.Modding.Settings.SettingBase.html",
    "title": "Class SettingBase | SimAirport Docs",
    "keywords": "Class SettingBase Inheritance System.Object SettingBase SettingBase<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Settings Assembly : SimAirport.Modding.Base.dll Syntax public abstract class SettingBase Properties | Improve this Doc View Source SortOrder Order by which the game sorts your settings. Ordered by decending, higher order equals a higher position in the UI. Declaration public int SortOrder { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Type The type we are currently holding Declaration public abstract Type Type { get; } Property Value Type Description System.Type A type Methods | Improve this Doc View Source GetValue() Get this setting's value. Declaration public abstract object GetValue() Returns Type Description System.Object Any value | Improve this Doc View Source SetValue(Object) Set this setting's value. Declaration public abstract void SetValue(object newValue) Parameters Type Name Description System.Object newValue New value to set"
  },
  "api/SimAirport.Modding.Settings.SettingBase-1.html": {
    "href": "api/SimAirport.Modding.Settings.SettingBase-1.html",
    "title": "Class SettingBase<T> | SimAirport Docs",
    "keywords": "Class SettingBase<T> Base setting type. Inheritance System.Object SettingBase SettingBase<T> CheckboxSetting DropdownSetting LabelSetting SliderSetting StringSetting Inherited Members SettingBase.SortOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Settings Assembly : SimAirport.Modding.Base.dll Syntax public abstract class SettingBase<T> : SettingBase Type Parameters Name Description T Any type that can be saved by Json.Net . Properties | Improve this Doc View Source Name Name of the variable. Declaration public abstract string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source OnValueChanged ValueChanged event, fires when value is changed. Example callback: OnValueChanged = delegate (val T) { this.MyMagicalFunction(val); } Declaration public abstract Action<T> OnValueChanged { get; set; } Property Value Type Description System.Action <T> | Improve this Doc View Source Type The type we are currently holding Declaration public override Type Type { get; } Property Value Type Description System.Type A type Overrides SettingBase.Type | Improve this Doc View Source Value Current value, will be set on game load and when user changes variable. Declaration public abstract T Value { get; set; } Property Value Type Description T Methods | Improve this Doc View Source GetValue() Get this setting's value. Declaration public override object GetValue() Returns Type Description System.Object Any value Overrides SettingBase.GetValue() | Improve this Doc View Source SetValue(Object) Set this setting's value. Declaration public override void SetValue(object newValue) Parameters Type Name Description System.Object newValue New value to set Overrides SettingBase.SetValue(Object)"
  },
  "api/SimAirport.Modding.Settings.SettingManager.html": {
    "href": "api/SimAirport.Modding.Settings.SettingManager.html",
    "title": "Class SettingManager | SimAirport Docs",
    "keywords": "Class SettingManager Inheritance System.Object SettingManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Settings Assembly : SimAirport.Modding.Base.dll Syntax public class SettingManager Constructors | Improve this Doc View Source SettingManager(Dictionary<String, SettingBase>) Declaration public SettingManager(Dictionary<string, SettingBase> loadedSettings) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , SettingBase > loadedSettings Methods | Improve this Doc View Source AddDefault(String, SettingBase) Adds a setting only if it wasn't yet added Declaration public void AddDefault(string key, SettingBase setting) Parameters Type Name Description System.String key Setting key to use SettingBase setting | Improve this Doc View Source GetAll() Get the dictionary containing all of the settings. Declaration public Dictionary<string, SettingBase> GetAll() Returns Type Description System.Collections.Generic.Dictionary < System.String , SettingBase > The private settings dictionary | Improve this Doc View Source GetOrDefault<T>(String, T) Gets the current value, if it doesn't exist returns the default value Declaration public T GetOrDefault<T>(string key, T defaultValue) Parameters Type Name Description System.String key Setting key to use T defaultValue Default value Returns Type Description T defaultValue or the setting's value. Type Parameters Name Description T Any type that can be saved by Json.Net . | Improve this Doc View Source RemoveSetting(String) Remove the setting and it's data. Declaration public void RemoveSetting(string key) Parameters Type Name Description System.String key Setting key to use | Improve this Doc View Source TryGetBool(String, out Boolean) Declaration public bool TryGetBool(string key, out bool value) Parameters Type Name Description System.String key Setting key to use System.Boolean value Returns Type Description System.Boolean true if the setting value existed, false if not. | Improve this Doc View Source TryGetFloat(String, out Single) Declaration public bool TryGetFloat(string key, out float value) Parameters Type Name Description System.String key Setting key to use System.Single value Returns Type Description System.Boolean true if the setting value existed, false if not. | Improve this Doc View Source TryGetSetting<T>(String, out T) Gets a specific SettingBase (not Value). Declaration public bool TryGetSetting<T>(string key, out T tSetting) where T : SettingBase Parameters Type Name Description System.String key Setting key to use T tSetting Reference to set Returns Type Description System.Boolean true if the setting value existed and is the same type, false if not. Type Parameters Name Description T The type of SettingBase to return. | Improve this Doc View Source TryGetString(String, out String) Declaration public bool TryGetString(string key, out string value) Parameters Type Name Description System.String key Setting key to use System.String value Returns Type Description System.Boolean true if the setting value existed, false if not. | Improve this Doc View Source TryGetValue<T>(String, out T) Gets the current value, if it doesn't exist returns the default value Declaration public bool TryGetValue<T>(string key, out T value) Parameters Type Name Description System.String key Setting key to use T value Reference to set Returns Type Description System.Boolean true if the setting value existed and is the same type, false if not. Type Parameters Name Description T Any type that can be saved by Json.Net . | Improve this Doc View Source UpdateValue<T>(String, T) Update the setting's value. Declaration public bool UpdateValue<T>(string key, T value) Parameters Type Name Description System.String key Setting key to use T value The value to set the setting Returns Type Description System.Boolean true if the setting value existed and is the same type, false if not. Type Parameters Name Description T Any type that can be saved by Json.Net ."
  },
  "api/SimAirport.Modding.Settings.SliderSetting.html": {
    "href": "api/SimAirport.Modding.Settings.SliderSetting.html",
    "title": "Class SliderSetting | SimAirport Docs",
    "keywords": "Class SliderSetting Setting for a float value, will be displayed as slider. Inheritance System.Object SettingBase SettingBase < System.Single > SliderSetting Inherited Members SettingBase<Single>.Type SettingBase<Single>.SetValue(Object) SettingBase<Single>.GetValue() SettingBase.SortOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Settings Assembly : SimAirport.Modding.Base.dll Syntax public class SliderSetting : SettingBase<float> Properties | Improve this Doc View Source Maximum Maximmum slider value. Declaration public float Maximum { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Minimum Minimum slier value. Declaration public float Minimum { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Name Name of the variable. Declaration public override string Name { get; set; } Property Value Type Description System.String Overrides SimAirport.Modding.Settings.SettingBase<System.Single>.Name | Improve this Doc View Source OnValueChanged ValueChanged event, fires when value is changed. Example callback: OnValueChanged = delegate (val T) { this.MyMagicalFunction(val); } Declaration public override Action<float> OnValueChanged { get; set; } Property Value Type Description System.Action < System.Single > Overrides SimAirport.Modding.Settings.SettingBase<System.Single>.OnValueChanged | Improve this Doc View Source Stepping How much does the slider increase/movement Declaration public int Stepping { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Value Current value, will be set on game load and when user changes variable. Declaration public override float Value { get; set; } Property Value Type Description System.Single Overrides SimAirport.Modding.Settings.SettingBase<System.Single>.Value | Improve this Doc View Source ValueFormat The format to use when displaying the current number on the right side of a Slider. See this for more information. Declaration public string ValueFormat { get; set; } Property Value Type Description System.String"
  },
  "api/SimAirport.Modding.Settings.StringSetting.html": {
    "href": "api/SimAirport.Modding.Settings.StringSetting.html",
    "title": "Class StringSetting | SimAirport Docs",
    "keywords": "Class StringSetting Setting for a string, will be displayed as a textbox. Inheritance System.Object SettingBase SettingBase < System.String > StringSetting Inherited Members SettingBase<String>.Type SettingBase<String>.SetValue(Object) SettingBase<String>.GetValue() SettingBase.SortOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SimAirport.Modding.Settings Assembly : SimAirport.Modding.Base.dll Syntax public class StringSetting : SettingBase<string> Properties | Improve this Doc View Source Name Name of the variable. Declaration public override string Name { get; set; } Property Value Type Description System.String Overrides SimAirport.Modding.Settings.SettingBase<System.String>.Name | Improve this Doc View Source OnValueChanged ValueChanged event, fires when value is changed. Example callback: OnValueChanged = delegate (val T) { this.MyMagicalFunction(val); } Declaration public override Action<string> OnValueChanged { get; set; } Property Value Type Description System.Action < System.String > Overrides SimAirport.Modding.Settings.SettingBase<System.String>.OnValueChanged | Improve this Doc View Source Placeholder Declaration public string Placeholder { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value Current value, will be set on game load and when user changes variable. Declaration public override string Value { get; set; } Property Value Type Description System.String Overrides SimAirport.Modding.Settings.SettingBase<System.String>.Value"
  },
  "guides/basicmod.html": {
    "href": "guides/basicmod.html",
    "title": "Basic Script Mod | SimAirport Docs",
    "keywords": "Basic Script Mod This guide assumes that you are using Visual Studio and have done the requirements . Setup To get started up, begin by creating a new .Net Framework project. Select Class Library (.NET Framework) After creating a new project, reference SimAirport.Modding.Base.dll on your mod. Scripting Scripting a new Zone TODO finish this // some code Scripting a new (X) TODO finish this // some code"
  },
  "guides/customoptions.html": {
    "href": "guides/customoptions.html",
    "title": "Custom Options | SimAirport Docs",
    "keywords": "Custom Options Here is a guide onto using SimAirport.Modding.Settings , letting the game handle saving and rendering of the data. Setup Begin by importing SimAirport.Modding.Settings and adding this to your OnSettingsLoaded() Usage Here's a basic setting which adds a toggle option in the game. namespace name.MyMod { public class Mod : BaseMod { // ... your vars or funcs // This is the settings manager that will handle saving, loading, and rendering of the settings. // The game will handle setting this, so you do not need to worry about it. public Settings.SettingManager SettingManager { get; set; } public override void OnSettingsLoaded() { // Create a checkbox with a key \"myKey_checkbox\" which can be used to access later! SettingManager.AddDefault(\"myKey_checkbox\", new CheckboxSetting { Name = \"Check me!\", Value = false, // this is the default value }); // Now we can access it! It will either be false or whatever it got saved var success = SettingManager.TryGetBool(\"myKey_checkbox\", out var statement); // `success` var is either TRUE or FALSE depending if it failed fetching the saved value. // the `statement` var returns the saved or default value of the setting // You can do a more direct one using this var directToThePoint = SettingManager.GetOrDefault(\"myKey_checkbox\", false); // `directToThePoint` var is direct to the point // this is to remove the setting values. During development it is good to clear the options // as some values gets saved, such as: // Name (All), Min (SliderSetting), Max (SliderSetting), Stepping (SliderSetting), // ValueFormat (SliderSetting) SettingManager.RemoveSetting(\"myKey_checkbox\"); } // ... your vars or funcs } } Reminder! It's recommended to have a RemoveSetting() on all of your keys during development as it saves some value that you might change during development. You can find out other setting types in the SimAirport.Modding.Settings , all of them are prefixed with Setting (eg: StringSetting )."
  },
  "index.html": {
    "href": "index.html",
    "title": "SimAirport Script Modding | SimAirport Docs",
    "keywords": "SimAirport Script Modding Documentation and guides for the SimAirport Scripting API. For basic modding (airlines, translation, material, component configs, etc...), use the wiki instead. Requirements Some IDE like Visual Studio , a normal text editor does the job too but it's way harder. The SimAirport.Modding library. The guts and will to do so. Experience with c# class libraries and .Net framework 4.7.1 . Unity (optional, check your log file for the current version, it's one of the first lines). The SimAirport.Modding Library The library is required to load scriptmods in. It also contains helper functions to make scriptmodding easier! Localy Obtaining You can localy obtain a compiled version at steamapps\\common\\SimAirport\\SimAirport_Data\\Managed\\SimAirport.Modding.Base.dll . Downloading The API can be downloaded from NuGet . Manual Compilation You can compile the repository's code to build a DLL which you can reference on your scriptmod. By default, the project file should be able to find the dependencies. If this fails, you can manually reference them by going to your steamapps\\common\\SimAirport\\SimAirport_Data\\Managed and manually referencing it."
  }
}